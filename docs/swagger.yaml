basePath: /api/v1
definitions:
  auth.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterDto:
    properties:
      age:
        maximum: 120
        minimum: 1
        type: integer
      email:
        type: string
      gender:
        $ref: '#/definitions/authEnums.GenderType'
      oauth_id:
        type: string
      oauth_provider:
        type: string
      password:
        type: string
      picture:
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - age
    - email
    - gender
    - password
    - username
    type: object
  auth.ReturnToken:
    properties:
      exp:
        type: integer
      token:
        type: string
    type: object
  authEnums.GenderType:
    enum:
    - male
    - female
    type: string
    x-enum-varnames:
    - GenderMale
    - GenderFemale
  dashboard.DashboardResponse:
    properties:
      analysis:
        $ref: '#/definitions/dashboard.WorkoutAnalysis'
      frequency_graph:
        $ref: '#/definitions/dashboard.FrequencyGraphData'
    type: object
  dashboard.FrequencyGraphData:
    properties:
      labels:
        description: Data points for last 30 days
        items:
          type: string
        type: array
      trendline:
        description: 7-day moving average
        items:
          type: number
        type: array
      values:
        description: Number of exercises/workouts per day
        items:
          type: integer
        type: array
    type: object
  dashboard.UserStrengthStandardPerExercise:
    properties:
      equipment:
        $ref: '#/definitions/exerciseEnums.Equipment'
      exercise:
        type: string
      lastPerformed:
        type: string
      relativeStrength:
        type: number
      repmax:
        type: number
      score:
        type: number
      strengthLevel:
        $ref: '#/definitions/dashboardEnums.StrengthType'
    type: object
  dashboard.UserStrengthStandardPerMuscleGroup:
    properties:
      score:
        type: number
      strength_level:
        $ref: '#/definitions/dashboardEnums.StrengthType'
      target_muscle:
        $ref: '#/definitions/exerciseEnums.TargetMuscle'
    type: object
  dashboard.UserStrengthStandards:
    properties:
      exerciseStandards:
        items:
          $ref: '#/definitions/dashboard.UserStrengthStandardPerExercise'
        type: array
      muscleGroupStrengths:
        items:
          $ref: '#/definitions/dashboard.UserStrengthStandardPerMuscleGroup'
        type: array
    type: object
  dashboard.WorkoutAnalysis:
    properties:
      average_per_week:
        description: Time-based Stats
        type: number
      best_streak:
        description: Best consecutive days streak
        type: integer
      current_streak:
        description: Current consecutive days streak
        type: integer
      last_month_count:
        description: Workouts in last 30 days
        type: integer
      last_week_count:
        description: Recent Trends
        type: integer
      most_active_day:
        description: Pattern Analysis
        type: string
      most_active_time:
        description: '"Morning", "Afternoon", "Evening", "Night"'
        type: string
      total_exercises:
        type: integer
      total_volume:
        type: number
      total_workouts:
        description: General Stats
        type: integer
    type: object
  dashboardEnums.StrengthType:
    enum:
    - untrained
    - beginner
    - novice
    - intermediate
    - advanced
    - elite
    type: string
    x-enum-comments:
      StrengthTypeAdvanced: Score 75-112.5
      StrengthTypeBeginner: Score < 30
      StrengthTypeElite: Score > 112.5
      StrengthTypeIntermediate: Score 45-75
      StrengthTypeNovice: Score 30-45
      StrengthTypeUntrained: Score = 0
    x-enum-varnames:
    - StrengthTypeUntrained
    - StrengthTypeBeginner
    - StrengthTypeNovice
    - StrengthTypeIntermediate
    - StrengthTypeAdvanced
    - StrengthTypeElite
  exercise.CreateExerciseDto:
    properties:
      body_part:
        items:
          $ref: '#/definitions/exerciseEnums.BodyPart'
        type: array
      equipment:
        $ref: '#/definitions/exerciseEnums.Equipment'
      execution:
        items:
          type: string
        type: array
      force:
        $ref: '#/definitions/exerciseEnums.Force'
      image:
        type: string
      mechanics:
        $ref: '#/definitions/exerciseEnums.Mechanics'
      name:
        type: string
      preparation:
        items:
          type: string
        type: array
      target_muscle:
        items:
          $ref: '#/definitions/exerciseEnums.TargetMuscle'
        type: array
    required:
    - body_part
    - equipment
    - execution
    - force
    - mechanics
    - name
    - preparation
    - target_muscle
    type: object
  exercise.Exercise:
    properties:
      _id:
        type: string
      body_part:
        items:
          $ref: '#/definitions/exerciseEnums.BodyPart'
        type: array
      created_at:
        type: string
      deleted_at:
        type: string
      equipment:
        $ref: '#/definitions/exerciseEnums.Equipment'
      execution:
        items:
          type: string
        type: array
      force:
        $ref: '#/definitions/exerciseEnums.Force'
      image:
        type: string
      mechanics:
        $ref: '#/definitions/exerciseEnums.Mechanics'
      name:
        type: string
      preparation:
        items:
          type: string
        type: array
      target_muscle:
        items:
          $ref: '#/definitions/exerciseEnums.TargetMuscle'
        type: array
      updated_at:
        type: string
      userid:
        type: string
    required:
    - body_part
    - equipment
    - execution
    - force
    - mechanics
    - name
    - preparation
    - target_muscle
    - userid
    type: object
  exercise.UpdateExerciseDto:
    properties:
      body_part:
        items:
          $ref: '#/definitions/exerciseEnums.BodyPart'
        type: array
      equipment:
        $ref: '#/definitions/exerciseEnums.Equipment'
      execution:
        items:
          type: string
        type: array
      force:
        $ref: '#/definitions/exerciseEnums.Force'
      image:
        type: string
      mechanics:
        $ref: '#/definitions/exerciseEnums.Mechanics'
      name:
        type: string
      preparation:
        items:
          type: string
        type: array
      target_muscle:
        items:
          $ref: '#/definitions/exerciseEnums.TargetMuscle'
        type: array
    type: object
  exerciseEnums.BodyPart:
    enum:
    - Back
    - Calves
    - Chest
    - Forearm
    - Hips
    - Neck
    - Shoulder
    - Thighs
    - Upper Arms
    type: string
    x-enum-varnames:
    - Back
    - Calves
    - Chest
    - Forearm
    - Hips
    - Neck
    - Shoulder
    - Thighs
    - UpperArms
  exerciseEnums.Equipment:
    enum:
    - Assisted
    - Assisted (machine)
    - Assisted (partner)
    - Band Resistive
    - Band-assisted
    - Barbell
    - Body Weight
    - Cable
    - Cable Standing Fly
    - Cable (pull side)
    - Dumbbell
    - Isometric
    - Lever
    - Lever (plate loaded)
    - Lever (selectorized)
    - Plyometric
    - Self-assisted
    - Sled
    - Sled (plate loaded)
    - Sled (selectorized)
    - Smith
    - Suspended
    - Suspension
    - Weighted
    - Weighted Chest Dip
    type: string
    x-enum-varnames:
    - Assisted
    - AssistedMachine
    - AssistedPartner
    - BandResistive
    - BandAssisted
    - Barbell
    - BodyWeight
    - Cable
    - CableStandingFly
    - CablePullSide
    - Dumbbell
    - Isometric
    - Lever
    - LeverPlateLoaded
    - LeverSelectorized
    - Plyometric
    - SelfAssisted
    - Sled
    - SledPlateLoaded
    - SledSelectorized
    - Smith
    - Suspended
    - Suspension
    - Weighted
    - WeightedChestDip
  exerciseEnums.Force:
    enum:
    - Push
    - Pull
    - Push & Pull
    type: string
    x-enum-varnames:
    - Push
    - Pull
    - PushAndPull
  exerciseEnums.Mechanics:
    enum:
    - Compound
    - Isolated
    type: string
    x-enum-varnames:
    - Compound
    - Isolated
  exerciseEnums.TargetMuscle:
    enum:
    - Adductors
    - Anterior Deltoid
    - Biceps Brachii
    - Brachialis
    - Brachioradialis
    - Erector Spinae
    - Gastrocnemius
    - Gluteus Maximus
    - Hamstrings
    - Hip Flexors
    - Iliopsoas
    - Infraspinatus
    - Lateral Deltoid
    - Latissimus Dorsi
    - Levator Scapulae
    - Lower Trapezius
    - Middle Trapezius
    - Obliques
    - Pectoralis Major Clavicular
    - Pectoralis Major Sternal
    - Pectoralis Minor
    - Posterior Deltoid
    - Quadratus Lumborum
    - Quadriceps
    - Rectus Abdominis
    - Rhomboids
    - Serratus Anterior
    - Soleus
    - Splenius
    - Sternocleidomastoid
    - Subscapularis
    - Supraspinatus
    - Teres Minor
    - Tibialis Anterior
    - Trapezius
    - Triceps Brachii
    - Upper Trapezius
    type: string
    x-enum-varnames:
    - Adductors
    - AnteriorDeltoid
    - BicepsBrachii
    - Brachialis
    - Brachioradialis
    - ErectorSpinae
    - Gastrocnemius
    - GluteusMaximus
    - Hamstrings
    - HipFlexors
    - Iliopsoas
    - Infraspinatus
    - LateralDeltoid
    - LatissimusDorsi
    - LevatorScapulae
    - LowerTrapezius
    - MiddleTrapezius
    - Obliques
    - PectoralisMajorClav
    - PectoralisMajorSternal
    - PectoralisMinor
    - PosteriorDeltoid
    - QuadratusLumborum
    - Quadriceps
    - RectusAbdominis
    - Rhomboids
    - SerratusAnterior
    - Soleus
    - Splenius
    - Sternocleidomastoid
    - Subscapularis
    - Supraspinatus
    - TeresMinor
    - TibialisAnterior
    - Trapezius
    - TricepsBrachii
    - UpperTrapezius
  exerciseLog.CreateExerciseLogDto:
    properties:
      exerciseId:
        type: string
      notes:
        type: string
      sets:
        items:
          $ref: '#/definitions/exerciseLog.SetLog'
        type: array
    required:
    - exerciseId
    - sets
    type: object
  exerciseLog.ExerciseLog:
    properties:
      completed_sets:
        type: integer
      created_at:
        type: string
      datetime:
        type: string
      duration:
        type: integer
      exerciseid:
        type: string
      id:
        type: string
      notes:
        type: string
      sets:
        items:
          $ref: '#/definitions/exerciseLog.SetLog'
        type: array
      total_volume:
        type: number
      updated_at:
        type: string
      userid:
        type: string
    required:
    - exerciseid
    - userid
    type: object
  exerciseLog.SetLog:
    properties:
      reps:
        minimum: 1
        type: integer
      setNumber:
        minimum: 1
        type: integer
      type:
        allOf:
        - $ref: '#/definitions/exerciseLog.SetType'
        enum:
        - warm_up
        - working
        - drop
        - failure
      weight:
        minimum: 1
        type: number
    required:
    - reps
    - setNumber
    - type
    - weight
    type: object
  exerciseLog.SetType:
    enum:
    - warm_up
    - working
    - drop
    - failure
    type: string
    x-enum-varnames:
    - WarmUpSet
    - WorkingSet
    - DropSet
    - FailureSet
  exerciseLog.UpdateExerciseLogDto:
    properties:
      notes:
        type: string
      sets:
        items:
          $ref: '#/definitions/exerciseLog.SetLog'
        type: array
    required:
    - sets
    type: object
  foodlog.AddMealToFoodLogDto:
    properties:
      date:
        type: string
      meals:
        items:
          type: string
        type: array
    required:
    - date
    type: object
  foodlog.DailyNutrientResponse:
    properties:
      calories:
        type: number
      date:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    type: object
  foodlog.FoodLog:
    properties:
      created_at:
        type: string
      date:
        type: string
      id:
        type: string
      meals:
        items:
          type: string
        type: array
      updated_at:
        type: string
      userid:
        type: string
    required:
    - date
    - userid
    type: object
  foodlog.UpdateFoodLogDto:
    properties:
      date:
        type: string
      meals:
        items:
          type: string
        type: array
    required:
    - date
    type: object
  ingredient.CreateIngredientDto:
    properties:
      calories:
        default: 0
        type: number
      category:
        type: string
      description:
        type: string
      image:
        default: "null"
        type: string
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    required:
    - name
    type: object
  ingredient.Ingredient:
    properties:
      calories:
        default: 0
        type: number
      category:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        default: "null"
        type: string
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
      updated_at:
        type: string
      userid:
        type: string
    required:
    - name
    - userid
    type: object
  ingredient.UpdateIngredientDto:
    properties:
      calories:
        type: number
      category:
        type: string
      description:
        type: string
      image:
        type: string
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    type: object
  meal.CalculateNutrientBody:
    properties:
      ingredients:
        items:
          $ref: '#/definitions/types.Ingredient'
        type: array
    type: object
  meal.CalculateNutrientResponse:
    properties:
      calories:
        type: number
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    type: object
  meal.CreateMealDto:
    properties:
      calories:
        type: number
      category:
        type: string
      description:
        type: string
      image:
        type: string
      ingredients:
        items:
          $ref: '#/definitions/types.Ingredient'
        type: array
      isQuickAdd:
        default: false
        type: boolean
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    required:
    - name
    type: object
  meal.Meal:
    properties:
      brandName:
        type: string
      brandOwner:
        type: string
      calories:
        default: 0
        type: number
      category:
        type: string
      created_at:
        default: "null"
        type: string
      deleted_at:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        default: "null"
        type: string
      ingredients:
        items:
          $ref: '#/definitions/types.Ingredient'
        type: array
      isQuickAdd:
        default: false
        type: boolean
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
      servingSize:
        type: number
      servingSizeUnit:
        type: string
      updated_at:
        default: "null"
        type: string
      userid:
        type: string
    required:
    - name
    type: object
  meal.UpdateMealDto:
    properties:
      calories:
        type: number
      category:
        type: string
      description:
        type: string
      image:
        type: string
      ingredients:
        items:
          $ref: '#/definitions/types.Ingredient'
        type: array
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    type: object
  types.Ingredient:
    properties:
      amount:
        type: number
      ingredientId:
        type: string
      name:
        type: string
      unit:
        type: string
    required:
    - amount
    - ingredientId
    - unit
    type: object
  types.Nutrient:
    properties:
      amount:
        type: number
      name:
        type: string
      unit:
        type: string
    required:
    - amount
    - name
    - unit
    type: object
  user.CreateUserDto:
    properties:
      activityLevel:
        allOf:
        - $ref: '#/definitions/userFitnessPreferenceEnums.ActivityLevelType'
        default: sedentary
      age:
        maximum: 120
        minimum: 1
        type: integer
      email:
        type: string
      gender:
        $ref: '#/definitions/authEnums.GenderType'
      goal:
        allOf:
        - $ref: '#/definitions/userFitnessPreferenceEnums.GoalType'
        default: maintain
      height:
        default: 0
        type: number
      hip:
        default: 0
        type: number
      neck:
        default: 0
        type: number
      oauth_id:
        type: string
      oauth_provider:
        type: string
      password:
        type: string
      picture:
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
      waist:
        default: 0
        type: number
      weight:
        default: 0
        type: number
    required:
    - age
    - email
    - gender
    - password
    - username
    type: object
  user.UpdateBodyDto:
    properties:
      activityLevel:
        $ref: '#/definitions/userFitnessPreferenceEnums.ActivityLevelType'
      age:
        type: integer
      bmr:
        type: number
      gender:
        $ref: '#/definitions/authEnums.GenderType'
      goal:
        $ref: '#/definitions/userFitnessPreferenceEnums.GoalType'
      height:
        type: number
      hip:
        type: number
      macronutrients:
        $ref: '#/definitions/userFitnessPreferenceEnums.Macronutrients'
      neck:
        type: number
      waist:
        type: number
      weight:
        type: number
    type: object
  user.UpdateUsernamePasswordDto:
    properties:
      newPassword:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    type: object
  user.User:
    properties:
      activitylevel:
        allOf:
        - $ref: '#/definitions/userFitnessPreferenceEnums.ActivityLevelType'
        default: sedentary
      age:
        maximum: 120
        minimum: 1
        type: integer
      bmi:
        default: 0
        type: number
      bmr:
        default: 0
        type: number
      created_at:
        default: "null"
        type: string
      email:
        type: string
      gender:
        $ref: '#/definitions/authEnums.GenderType'
      goal:
        allOf:
        - $ref: '#/definitions/userFitnessPreferenceEnums.GoalType'
        default: maintain
      height:
        default: 0
        type: number
      hip:
        default: 0
        type: number
      id:
        type: string
      is_first_login:
        default: true
        type: boolean
      macronutrients:
        $ref: '#/definitions/userFitnessPreferenceEnums.Macronutrients'
      neck:
        default: 0
        type: number
      oauth_id:
        type: string
      oauth_provider:
        type: string
      password:
        type: string
      picture:
        type: string
      updated_at:
        default: "null"
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
      waist:
        default: 0
        type: number
      weight:
        default: 0
        type: number
    required:
    - age
    - email
    - gender
    - password
    - username
    type: object
  userFitnessPreferenceEnums.ActivityLevelType:
    enum:
    - sedentary
    - lightly_active
    - moderately_active
    - very_active
    - extra_active
    type: string
    x-enum-varnames:
    - ActivitySedentary
    - ActivityLightlyActive
    - ActivityModerate
    - ActivityVeryActive
    - ActivityExtraActive
  userFitnessPreferenceEnums.CarbPreferenceType:
    enum:
    - moderate_carb
    - low_carb
    - high_carb
    type: string
    x-enum-varnames:
    - CarbModerate
    - CarbLow
    - CarbHigh
  userFitnessPreferenceEnums.EnergyConsumptionPlan:
    properties:
      activity_level:
        $ref: '#/definitions/userFitnessPreferenceEnums.ActivityLevelType'
      bmr:
        type: number
      goal:
        $ref: '#/definitions/userFitnessPreferenceEnums.GoalType'
      macronutrients:
        items:
          $ref: '#/definitions/userFitnessPreferenceEnums.Macronutrients'
        type: array
    type: object
  userFitnessPreferenceEnums.GoalType:
    enum:
    - maintain
    - cutting
    - bulking
    type: string
    x-enum-varnames:
    - GoalMaintain
    - GoalCutting
    - GoalBulking
  userFitnessPreferenceEnums.Macronutrients:
    properties:
      calories:
        type: number
      carb_preference:
        $ref: '#/definitions/userFitnessPreferenceEnums.CarbPreferenceType'
      carbs:
        type: number
      fat:
        type: number
      protein:
        type: number
    type: object
  workout.CreateWorkoutDto:
    properties:
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/workout.WorkoutExercise'
        type: array
      name:
        type: string
    required:
    - name
    type: object
  workout.UpdateWorkoutDto:
    properties:
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/workout.WorkoutExercise'
        type: array
      name:
        type: string
    type: object
  workout.Workout:
    properties:
      created_at:
        type: string
      description:
        type: string
      exercises:
        items:
          $ref: '#/definitions/workout.WorkoutExercise'
        type: array
      id:
        type: string
      name:
        type: string
      updated_at:
        type: string
      userid:
        type: string
    required:
    - exercises
    - name
    type: object
  workout.WorkoutExercise:
    properties:
      exerciseid:
        type: string
      order:
        minimum: 0
        type: integer
    required:
    - exerciseid
    type: object
  workoutPlan.CreatePlanByCyclicWorkoutDto:
    properties:
      weeksDuration:
        type: integer
      workoutIds:
        items:
          type: string
        type: array
    required:
    - weeksDuration
    - workoutIds
    type: object
  workoutPlan.CreatePlanByDaysOfWeekDto:
    properties:
      fridayWorkoutId:
        type: string
      mondayWorkoutId:
        type: string
      saturdayWorkoutId:
        type: string
      sundayWorkoutId:
        type: string
      thursdayWorkoutId:
        type: string
      tuesdayWorkoutId:
        type: string
      wednesdayWorkoutId:
        type: string
      weeksDuration:
        type: integer
    required:
    - fridayWorkoutId
    - mondayWorkoutId
    - saturdayWorkoutId
    - sundayWorkoutId
    - thursdayWorkoutId
    - tuesdayWorkoutId
    - wednesdayWorkoutId
    - weeksDuration
    type: object
  workoutPlan.WorkoutPlan:
    properties:
      created_at:
        type: string
      dates:
        items:
          type: string
        minItems: 1
        type: array
      id:
        type: string
      updated_at:
        type: string
      userid:
        type: string
      workoutid:
        type: string
    required:
    - dates
    - userid
    - workoutid
    type: object
  workoutSession.CompleteExerciseDto:
    properties:
      exerciseLogId:
        type: string
    required:
    - exerciseLogId
    type: object
  workoutSession.CreateWorkoutSessionDto:
    properties:
      notes:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/workoutSession.SessionType'
        enum:
        - planned
        - custom
      workoutId:
        type: string
    required:
    - type
    type: object
  workoutSession.LoggedSessionDto:
    properties:
      endTime:
        type: string
      exercises:
        items:
          $ref: '#/definitions/workoutSession.SessionExercise'
        type: array
      notes:
        type: string
      startTime:
        type: string
      status:
        $ref: '#/definitions/workoutSession.SessionStatus'
      workoutId:
        type: string
    required:
    - endTime
    - startTime
    - status
    type: object
  workoutSession.SessionExercise:
    properties:
      exerciseid:
        type: string
      exerciselogid:
        type: string
      order:
        minimum: 0
        type: integer
    required:
    - exerciseid
    - order
    type: object
  workoutSession.SessionStatus:
    enum:
    - in_progress
    - completed
    - cancelled
    type: string
    x-enum-varnames:
    - StatusInProgress
    - StatusCompleted
    - StatusCancelled
  workoutSession.SessionType:
    enum:
    - planned
    - custom
    - logged
    type: string
    x-enum-varnames:
    - PlannedSession
    - CustomSession
    - LoggedSession
  workoutSession.UpdateWorkoutSessionDto:
    properties:
      exercises:
        items:
          $ref: '#/definitions/workoutSession.SessionExercise'
        type: array
      notes:
        type: string
      status:
        $ref: '#/definitions/workoutSession.SessionStatus'
    type: object
  workoutSession.WorkoutSession:
    properties:
      created_at:
        type: string
      duration:
        type: integer
      end_time:
        type: string
      exercises:
        items:
          $ref: '#/definitions/workoutSession.SessionExercise'
        type: array
      id:
        type: string
      notes:
        type: string
      start_time:
        type: string
      status:
        $ref: '#/definitions/workoutSession.SessionStatus'
      total_volume:
        type: number
      type:
        $ref: '#/definitions/workoutSession.SessionType'
      updated_at:
        type: string
      userid:
        type: string
      workoutid:
        type: string
    required:
    - type
    - userid
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for GymsBro API.
  title: GymsBro API
  version: "1.0"
paths:
  /auth/genders:
    get:
      consumes:
      - application/json
      description: Get all genders
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/authEnums.GenderType'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all genders
      tags:
      - auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.ReturnToken'
        "400":
          description: Bad Request
          schema: {}
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      summary: Logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Register
      tags:
      - auth
  /dashboard:
    get:
      consumes:
      - application/json
      description: Get workout frequency graph and analysis
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dashboard.DashboardResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Get workout dashboard
      tags:
      - dashboard
  /dashboard/strength-standards:
    get:
      consumes:
      - application/json
      description: Get user strength standards
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dashboard.UserStrengthStandards'
        "400":
          description: Bad Request
          schema: {}
      summary: Get user strength standards
      tags:
      - dashboard
  /exercise:
    get:
      consumes:
      - application/json
      description: Get all exercises
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exercise.Exercise'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Get all exercises
      tags:
      - exercises
    post:
      consumes:
      - application/json
      description: Create an exercise
      parameters:
      - description: Create Exercise
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/exercise.CreateExerciseDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/exercise.Exercise'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Create an exercise
      tags:
      - exercises
  /exercise-log:
    get:
      consumes:
      - application/json
      description: Get all exercise logs for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseLog.ExerciseLog'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get user logs
      tags:
      - exerciseLogs
    post:
      consumes:
      - application/json
      description: Log a completed exercise
      parameters:
      - description: Exercise Log
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/exerciseLog.CreateExerciseLogDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/exerciseLog.ExerciseLog'
        "400":
          description: Bad Request
          schema: {}
      summary: Create exercise log
      tags:
      - exerciseLogs
  /exercise-log/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an exercise log
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete exercise log
      tags:
      - exerciseLogs
    put:
      consumes:
      - application/json
      description: Update an existing exercise log
      parameters:
      - description: Log ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Log
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/exerciseLog.UpdateExerciseLogDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exerciseLog.ExerciseLog'
        "400":
          description: Bad Request
          schema: {}
      summary: Update exercise log
      tags:
      - exerciseLogs
  /exercise-log/exercise/{exerciseId}:
    get:
      consumes:
      - application/json
      description: Get logs for a specific exercise
      parameters:
      - description: Exercise ID
        in: path
        name: exerciseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseLog.ExerciseLog'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get exercise logs
      tags:
      - exerciseLogs
  /exercise-log/range:
    get:
      consumes:
      - application/json
      description: Get exercise logs within a date range
      parameters:
      - description: Start Date (YYYY-MM-DD HH:mm:ss)
        in: query
        name: startDate
        required: true
        type: string
      - description: End Date (YYYY-MM-DD HH:mm:ss)
        in: query
        name: endDate
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseLog.ExerciseLog'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get logs by date range
      tags:
      - exerciseLogs
  /exercise/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an exercise
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Delete an exercise
      tags:
      - exercises
    get:
      consumes:
      - application/json
      description: Get an exercise
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exercise.Exercise'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get an exercise
      tags:
      - exercises
    put:
      consumes:
      - application/json
      description: Update an exercise
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Exercise
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/exercise.UpdateExerciseDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exercise.Exercise'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Update an exercise
      tags:
      - exercises
  /exercise/{id}/image:
    patch:
      consumes:
      - multipart/form-data
      description: Update an exercise's image
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: string
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exercise.Exercise'
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Update exercise image
      tags:
      - exercises
  /exercise/bodypart:
    get:
      consumes:
      - application/json
      description: Get all body parts
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseEnums.BodyPart'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Get all body parts
      tags:
      - exercises
  /exercise/equipment:
    get:
      consumes:
      - application/json
      description: Get all equipment
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseEnums.Equipment'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Get all equipment
      tags:
      - exercises
  /exercise/force:
    get:
      consumes:
      - application/json
      description: Get all force
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseEnums.Force'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Get all force
      tags:
      - exercises
  /exercise/many:
    post:
      consumes:
      - application/json
      description: Create many exercises
      parameters:
      - description: Create Exercises
        in: body
        name: exercises
        required: true
        schema:
          items:
            $ref: '#/definitions/exercise.CreateExerciseDto'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/exercise.Exercise'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Create many exercises
      tags:
      - exercises
  /exercise/mechanics:
    get:
      consumes:
      - application/json
      description: Get all mechanics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseEnums.Mechanics'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Get all mechanics
      tags:
      - exercises
  /exercise/search:
    get:
      consumes:
      - application/json
      description: Search exercises by name, types and muscle groups
      parameters:
      - description: Search query for exercise name
        in: query
        name: query
        type: string
      - description: Equipment types (comma-separated)
        in: query
        name: equipment
        type: string
      - description: Mechanics types (comma-separated)
        in: query
        name: mechanics
        type: string
      - description: Force types (comma-separated)
        in: query
        name: force
        type: string
      - description: Body parts (comma-separated)
        in: query
        name: body_part
        type: string
      - description: Target muscles (comma-separated)
        in: query
        name: target_muscle
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exercise.Exercise'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Search and filter exercises
      tags:
      - exercises
  /exercise/targetmuscle:
    get:
      consumes:
      - application/json
      description: Get all target muscles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exerciseEnums.TargetMuscle'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Get all target muscles
      tags:
      - exercises
  /foodlog:
    post:
      consumes:
      - application/json
      description: Add meal to food log
      parameters:
      - description: Food log object that needs to be created
        in: body
        name: foodlog
        required: true
        schema:
          $ref: '#/definitions/foodlog.AddMealToFoodLogDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/foodlog.FoodLog'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Add meal to food log
      tags:
      - foodlog
  /foodlog/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a food log
      parameters:
      - description: Food log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete a food log
      tags:
      - foodlog
    get:
      consumes:
      - application/json
      description: Get a food log
      parameters:
      - description: Food log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/foodlog.FoodLog'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a food log
      tags:
      - foodlog
    put:
      consumes:
      - application/json
      description: Update a food log
      parameters:
      - description: Food log ID
        in: path
        name: id
        required: true
        type: string
      - description: Food log object that needs to be updated
        in: body
        name: foodlog
        required: true
        schema:
          $ref: '#/definitions/foodlog.UpdateFoodLogDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/foodlog.FoodLog'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a food log
      tags:
      - foodlog
  /foodlog/nutrients/{date}:
    get:
      consumes:
      - application/json
      description: Calculate total nutrients and calories for a specific date
      parameters:
      - description: Date (YYYY-MM-DD)
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/foodlog.DailyNutrientResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Calculate daily nutrients
      tags:
      - foodlog
  /foodlog/user:
    get:
      consumes:
      - application/json
      description: Get a food log by user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/foodlog.FoodLog'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a food log by user
      tags:
      - foodlog
  /foodlog/user/{date}:
    get:
      consumes:
      - application/json
      description: Get a food log by user and date
      parameters:
      - description: Date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/foodlog.FoodLog'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Get a food log by user and date
      tags:
      - foodlog
  /ingredient:
    post:
      consumes:
      - application/json
      description: Create new ingredient
      parameters:
      - description: Ingredient object that needs to be created
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/ingredient.CreateIngredientDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ingredient.Ingredient'
        "400":
          description: Bad Request
          schema: {}
      summary: Create new ingredient
      tags:
      - ingredient
  /ingredient/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an ingredient
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete an ingredient
      tags:
      - ingredient
    get:
      consumes:
      - application/json
      description: Get an ingredient
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ingredient.Ingredient'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get an ingredient
      tags:
      - ingredient
    put:
      consumes:
      - application/json
      description: Update an ingredient
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: string
      - description: Ingredient object that needs to be updated
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/ingredient.UpdateIngredientDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ingredient.Ingredient'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update an ingredient
      tags:
      - ingredient
  /ingredient/{id}/image:
    patch:
      consumes:
      - multipart/form-data
      description: Update an ingredient's image
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: string
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ingredient.Ingredient'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Update ingredient image
      tags:
      - ingredient
  /ingredient/search:
    get:
      consumes:
      - application/json
      description: Search ingredients with optional filters
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Minimum calories
        in: query
        name: minCalories
        type: number
      - description: Maximum calories
        in: query
        name: maxCalories
        type: number
      - description: Nutrients filter (comma-separated)
        in: query
        name: nutrients
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ingredient.Ingredient'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Search and filter ingredients
      tags:
      - ingredient
  /ingredient/user:
    get:
      consumes:
      - application/json
      description: Get ingredients by user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ingredient.Ingredient'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get ingredients by user
      tags:
      - ingredient
  /meal:
    post:
      consumes:
      - application/json
      description: Create a meal
      parameters:
      - description: Create Meal
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/meal.CreateMealDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/meal.Meal'
        "400":
          description: Bad Request
          schema: {}
      summary: Create a meal
      tags:
      - meals
  /meal/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a meal
      tags:
      - meals
    get:
      consumes:
      - application/json
      description: Get a meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/meal.Meal'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a meal
      tags:
      - meals
    put:
      consumes:
      - application/json
      description: Update a meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Meal
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/meal.UpdateMealDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/meal.Meal'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update a meal
      tags:
      - meals
  /meal/{id}/image:
    patch:
      consumes:
      - multipart/form-data
      description: Update a meal's image
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      - description: Image file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/meal.Meal'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
      summary: Update meal image
      tags:
      - meals
  /meal/calculate:
    post:
      consumes:
      - application/json
      description: Calculate nutrient
      parameters:
      - description: Calculate Nutrient
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/meal.CalculateNutrientBody'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/meal.CalculateNutrientResponse'
        "400":
          description: Bad Request
          schema: {}
      summary: Calculate nutrient
      tags:
      - meals
  /meal/search:
    get:
      consumes:
      - application/json
      description: Search meals with optional filters
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Minimum calories
        in: query
        name: minCalories
        type: number
      - description: Maximum calories
        in: query
        name: maxCalories
        type: number
      - description: Nutrients filter (comma-separated)
        in: query
        name: nutrients
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/meal.Meal'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Search and filter meals
      tags:
      - meals
  /meal/user:
    get:
      consumes:
      - application/json
      description: Get meals by user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/meal.Meal'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get meals by user
      tags:
      - meals
  /user:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Create a user
      tags:
      - users
  /user/activitylevels:
    get:
      consumes:
      - application/json
      description: Get all activity levels
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/userFitnessPreferenceEnums.ActivityLevelType'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all activity levels
      tags:
      - users
  /user/body:
    patch:
      consumes:
      - application/json
      description: Update a user body
      parameters:
      - description: UpdateBody User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateBodyDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a user body
      tags:
      - users
  /user/carbpreferences:
    get:
      consumes:
      - application/json
      description: Get all carb preferences
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/userFitnessPreferenceEnums.CarbPreferenceType'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all carb preferences
      tags:
      - users
  /user/energyplan:
    get:
      consumes:
      - application/json
      description: Get a user energy consume plan
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/userFitnessPreferenceEnums.EnergyConsumptionPlan'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a user energy consume plan
      tags:
      - users
  /user/first-login:
    patch:
      consumes:
      - application/json
      description: Mark user as not first time login
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Update first login status
      tags:
      - users
  /user/goals:
    get:
      consumes:
      - application/json
      description: Get all goals
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/userFitnessPreferenceEnums.GoalType'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all goals
      tags:
      - users
  /user/me:
    delete:
      consumes:
      - application/json
      description: Delete a user
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete a user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a user
      tags:
      - users
  /user/picture:
    patch:
      consumes:
      - multipart/form-data
      description: Upload and update user's profile picture
      parameters:
      - description: Profile picture (jpeg/png)
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Update user profile picture
      tags:
      - users
  /user/usepass:
    patch:
      consumes:
      - application/json
      description: Update a user username and password
      parameters:
      - description: UpdateUsernamePassword User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateUsernamePasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a user username and password
      tags:
      - users
  /workout:
    get:
      consumes:
      - application/json
      description: Get all workouts for the current user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/workout.Workout'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get user workouts
      tags:
      - workouts
    post:
      consumes:
      - application/json
      description: Create a new workout plan
      parameters:
      - description: Create Workout
        in: body
        name: workout
        required: true
        schema:
          $ref: '#/definitions/workout.CreateWorkoutDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/workout.Workout'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Create a workout
      tags:
      - workouts
  /workout-session:
    get:
      consumes:
      - application/json
      description: Get all workout sessions for a user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/workoutSession.WorkoutSession'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get user sessions
      tags:
      - workoutSessions
    post:
      consumes:
      - application/json
      description: Start a new workout session
      parameters:
      - description: Create Session
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/workoutSession.CreateWorkoutSessionDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/workoutSession.WorkoutSession'
        "400":
          description: Bad Request
          schema: {}
      summary: Start workout session
      tags:
      - workoutSessions
  /workout-session/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workout session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete session
      tags:
      - workoutSessions
    get:
      consumes:
      - application/json
      description: Get a workout session by ID
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workoutSession.WorkoutSession'
        "400":
          description: Bad Request
          schema: {}
      summary: Get session
      tags:
      - workoutSessions
    put:
      consumes:
      - application/json
      description: Update a workout session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Session
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/workoutSession.UpdateWorkoutSessionDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workoutSession.WorkoutSession'
        "400":
          description: Bad Request
          schema: {}
      summary: Update workout session
      tags:
      - workoutSessions
  /workout-session/{id}/end:
    put:
      consumes:
      - application/json
      description: End an active workout session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workoutSession.WorkoutSession'
        "400":
          description: Bad Request
          schema: {}
      summary: End workout session
      tags:
      - workoutSessions
  /workout-session/{id}/exercise/{exerciseId}:
    post:
      consumes:
      - application/json
      description: Log a completed exercise in the session
      parameters:
      - description: Session ID
        in: path
        name: id
        required: true
        type: string
      - description: Exercise ID
        in: path
        name: exerciseId
        required: true
        type: string
      - description: Exercise Completion
        in: body
        name: log
        required: true
        schema:
          $ref: '#/definitions/workoutSession.CompleteExerciseDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workoutSession.WorkoutSession'
        "400":
          description: Bad Request
          schema: {}
      summary: Log exercise completion
      tags:
      - workoutSessions
  /workout-session/log:
    post:
      consumes:
      - application/json
      description: Create a new workout session with custom start and end times
      parameters:
      - description: Logged Session
        in: body
        name: session
        required: true
        schema:
          $ref: '#/definitions/workoutSession.LoggedSessionDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/workoutSession.WorkoutSession'
        "400":
          description: Bad Request
          schema: {}
      summary: Log custom session
      tags:
      - workoutSessions
  /workout/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a workout by ID
      parameters:
      - description: Workout ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete a workout
      tags:
      - workouts
    get:
      consumes:
      - application/json
      description: Get a workout by ID
      parameters:
      - description: Workout ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.Workout'
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get a workout
      tags:
      - workouts
    put:
      consumes:
      - application/json
      description: Update a workout by ID
      parameters:
      - description: Workout ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Workout
        in: body
        name: workout
        required: true
        schema:
          $ref: '#/definitions/workout.UpdateWorkoutDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/workout.Workout'
        "400":
          description: Bad Request
          schema: {}
        "404":
          description: Not Found
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update a workout
      tags:
      - workouts
  /workoutPlan/byCyclicWorkout:
    post:
      consumes:
      - application/json
      description: Create a workout plan by cycling through a list of workouts
      parameters:
      - description: Create Workout Plan by Cycle
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/workoutPlan.CreatePlanByCyclicWorkoutDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/workoutPlan.WorkoutPlan'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Create workout plan by cyclic workouts
      tags:
      - workoutPlan
  /workoutPlan/byDaysOfWeek:
    post:
      consumes:
      - application/json
      description: Create a workout plan with specific workouts for each day of the
        week
      parameters:
      - description: Create Workout Plan by Days
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/workoutPlan.CreatePlanByDaysOfWeekDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/workoutPlan.WorkoutPlan'
            type: array
        "400":
          description: Bad Request
          schema: {}
        "401":
          description: Unauthorized
          schema: {}
      summary: Create workout plan by days of week
      tags:
      - workoutPlan
  /workoutPlan/byUser:
    get:
      consumes:
      - application/json
      description: Get all workout plans for the authenticated user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/workoutPlan.WorkoutPlan'
            type: array
        "401":
          description: Unauthorized
          schema: {}
      summary: Get all workout plans
      tags:
      - workoutPlan
schemes:
- http
- https
security:
- Bearer: []
- cookieAuth: []
securityDefinitions:
  BearerAuth:
    description: 'Enter your bearer token in the format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
