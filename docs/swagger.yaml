basePath: /api/v1
definitions:
  auth.LoginDto:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  auth.RegisterDto:
    properties:
      age:
        maximum: 120
        minimum: 1
        type: integer
      email:
        type: string
      gender:
        type: string
      oauth_id:
        type: string
      oauth_provider:
        type: string
      password:
        type: string
      picture:
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - age
    - email
    - gender
    - password
    - username
    type: object
  auth.ReturnToken:
    properties:
      exp:
        type: integer
      token:
        type: string
    type: object
  exercise.CreateExerciseDto:
    properties:
      description:
        type: string
      image:
        type: string
      muscle:
        items:
          type: string
        type: array
      name:
        type: string
      type:
        items:
          type: string
        type: array
    required:
    - description
    - image
    - muscle
    - name
    - type
    type: object
  exercise.Exercise:
    properties:
      description:
        type: string
      id:
        type: string
      image:
        type: string
      muscle:
        items:
          type: string
        type: array
      name:
        type: string
      type:
        items:
          type: string
        type: array
    required:
    - description
    - image
    - muscle
    - name
    - type
    type: object
  exercise.UpdateExerciseDto:
    properties:
      description:
        type: string
      image:
        type: string
      muscle:
        items:
          type: string
        type: array
      name:
        type: string
      type:
        items:
          type: string
        type: array
    type: object
  foodlog.CreateFoodLogDto:
    properties:
      date:
        type: string
      meals:
        items:
          type: string
        type: array
    required:
    - date
    type: object
  foodlog.FoodLog:
    properties:
      created_at:
        type: string
      datetime:
        type: string
      id:
        type: string
      meals:
        items:
          type: string
        type: array
      updated_at:
        type: string
      userid:
        type: string
    required:
    - datetime
    - userid
    type: object
  function.CalPerActivity:
    properties:
      activityName:
        type: string
      calories:
        type: number
    type: object
  function.EnergyConsumptionPlan:
    properties:
      activityLevel:
        type: string
      allActivityCaloriesPerDay:
        items:
          $ref: '#/definitions/function.CalPerActivity'
        type: array
      bmr:
        type: number
      macronutrients:
        items:
          $ref: '#/definitions/function.Macronutrients'
        type: array
    type: object
  function.Macronutrients:
    properties:
      calories:
        type: number
      carbPreference:
        type: string
      carbs:
        type: number
      fat:
        type: number
      goal:
        type: string
      protein:
        type: number
    type: object
  ingredient.CreateIngredientDto:
    properties:
      calories:
        default: 0
        type: number
      category:
        type: string
      description:
        type: string
      image:
        default: "null"
        type: string
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    required:
    - name
    type: object
  ingredient.Ingredient:
    properties:
      calories:
        default: 0
        type: number
      category:
        type: string
      created_at:
        type: string
      description:
        type: string
      id:
        type: string
      image:
        default: "null"
        type: string
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
      updated_at:
        type: string
      userid:
        type: string
    required:
    - name
    - userid
    type: object
  ingredient.UpdateIngredientDto:
    properties:
      calories:
        type: number
      category:
        type: string
      description:
        type: string
      image:
        type: string
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
    type: object
  meal.CreateMealDto:
    properties:
      calories:
        type: number
      category:
        type: string
      description:
        type: string
      image:
        type: string
      ingredients:
        items:
          $ref: '#/definitions/types.Ingredient'
        type: array
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
      userid:
        type: string
    required:
    - name
    type: object
  meal.Meal:
    properties:
      brandName:
        type: string
      brandOwner:
        type: string
      calories:
        default: 0
        type: number
      category:
        type: string
      created_at:
        default: "null"
        type: string
      description:
        type: string
      id:
        type: string
      image:
        default: "null"
        type: string
      ingredients:
        items:
          $ref: '#/definitions/types.Ingredient'
        type: array
      name:
        type: string
      nutrients:
        items:
          $ref: '#/definitions/types.Nutrient'
        type: array
      servingSize:
        type: number
      servingSizeUnit:
        type: string
      updated_at:
        default: "null"
        type: string
      userid:
        type: string
    required:
    - name
    type: object
  meal.UpdateMealDto:
    properties:
      calories:
        type: number
      carb:
        type: number
      description:
        type: string
      fat:
        type: number
      protein:
        type: number
    type: object
  plans.CreatePlanDto:
    properties:
      dayofweek:
        type: string
      exercise:
        items:
          type: string
        type: array
      typeofplan:
        default: Rest
        type: string
      userid:
        type: string
    required:
    - dayofweek
    - userid
    type: object
  plans.Plan:
    properties:
      dayofweek:
        type: string
      exercise:
        items:
          type: string
        type: array
      id:
        type: string
      typeofplan:
        type: string
      userid:
        type: string
    required:
    - dayofweek
    - typeofplan
    - userid
    type: object
  plans.UpdatePlanDto:
    properties:
      exercise:
        items:
          type: string
        type: array
      typeofplan:
        type: string
    type: object
  types.Ingredient:
    properties:
      ingredientid:
        type: string
      name:
        type: string
      numofservings:
        type: number
      unit:
        type: string
      value:
        type: number
    required:
    - ingredientid
    - name
    - numofservings
    - unit
    - value
    type: object
  types.Nutrient:
    properties:
      amount:
        type: number
      name:
        type: string
      unit:
        type: string
    required:
    - amount
    - name
    - unit
    type: object
  user.CreateUserDto:
    properties:
      activityLevel:
        default: 0
        description: default:"0" is not working
        type: integer
      age:
        maximum: 120
        minimum: 1
        type: integer
      email:
        type: string
      gender:
        type: string
      height:
        default: 0
        description: default:"0" is not working
        type: number
      hip:
        default: 0
        description: default:"0" is not working
        type: number
      neck:
        default: 0
        description: default:"0" is not working
        type: number
      oauth_id:
        type: string
      oauth_provider:
        type: string
      password:
        type: string
      picture:
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
      waist:
        default: 0
        description: default:"0" is not working
        type: number
      weight:
        default: 0
        description: default:"0" is not working
        type: number
    required:
    - age
    - email
    - gender
    - password
    - username
    type: object
  user.UpadateUsernamePasswordDto:
    properties:
      newPassword:
        type: string
      password:
        type: string
      username:
        type: string
    required:
    - password
    type: object
  user.UpdateBodyDto:
    properties:
      activityLevel:
        type: integer
      age:
        type: integer
      gender:
        type: string
      height:
        type: number
      hip:
        type: number
      neck:
        type: number
      waist:
        type: number
      weight:
        type: number
    type: object
  user.User:
    properties:
      activitylevel:
        default: 0
        description: default:"0" is not working
        type: integer
      age:
        maximum: 120
        minimum: 1
        type: integer
      created_at:
        default: "null"
        type: string
      email:
        type: string
      gender:
        type: string
      goal:
        default: maintain
        type: string
      height:
        default: 0
        description: default:"0" is not working
        type: number
      hip:
        default: 0
        description: default:"0" is not working
        type: number
      id:
        type: string
      neck:
        default: 0
        description: default:"0" is not working
        type: number
      oauth_id:
        type: string
      oauth_provider:
        type: string
      password:
        type: string
      picture:
        type: string
      updated_at:
        default: "null"
        type: string
      username:
        maxLength: 20
        minLength: 3
        type: string
      waist:
        default: 0
        description: default:"0" is not working
        type: number
      weight:
        default: 0
        description: default:"0" is not working
        type: number
    required:
    - age
    - email
    - gender
    - password
    - username
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a sample server for GymsBro API.
  title: GymsBro API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.LoginDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/auth.ReturnToken'
        "400":
          description: Bad Request
          schema: {}
      summary: Login
      tags:
      - auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
      summary: Logout
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/auth.RegisterDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Register
      tags:
      - auth
  /exercise:
    get:
      consumes:
      - application/json
      description: Get all exercises
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exercise.Exercise'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all exercises
      tags:
      - exercises
    post:
      consumes:
      - application/json
      description: Create an exercise
      parameters:
      - description: Create Exercise
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/exercise.CreateExerciseDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/exercise.Exercise'
        "400":
          description: Bad Request
          schema: {}
      summary: Create an exercise
      tags:
      - exercises
  /exercise/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an exercise
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema: {}
        "400":
          description: Bad Request
          schema: {}
      summary: Delete an exercise
      tags:
      - exercises
    get:
      consumes:
      - application/json
      description: Get an exercise
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exercise.Exercise'
        "400":
          description: Bad Request
          schema: {}
      summary: Get an exercise
      tags:
      - exercises
    put:
      consumes:
      - application/json
      description: Update an exercise
      parameters:
      - description: Exercise ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Exercise
        in: body
        name: exercise
        required: true
        schema:
          $ref: '#/definitions/exercise.UpdateExerciseDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/exercise.Exercise'
        "400":
          description: Bad Request
          schema: {}
      summary: Update an exercise
      tags:
      - exercises
  /exercise/many:
    post:
      consumes:
      - application/json
      description: Create many exercises
      parameters:
      - description: Create Exercises
        in: body
        name: exercises
        required: true
        schema:
          items:
            $ref: '#/definitions/exercise.CreateExerciseDto'
          type: array
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            items:
              $ref: '#/definitions/exercise.Exercise'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Create many exercises
      tags:
      - exercises
  /exercise/type/{type}:
    get:
      consumes:
      - application/json
      description: Get exercises by type
      parameters:
      - description: Exercise Type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/exercise.Exercise'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get exercises by type
      tags:
      - exercises
  /foodlog:
    post:
      consumes:
      - application/json
      description: Create a food log
      parameters:
      - description: Food log object that needs to be created
        in: body
        name: foodlog
        required: true
        schema:
          $ref: '#/definitions/foodlog.CreateFoodLogDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/foodlog.FoodLog'
        "400":
          description: Bad Request
          schema: {}
      summary: Create a food log
      tags:
      - foodlog
  /foodlog/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a food log
      parameters:
      - description: Food log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete a food log
      tags:
      - foodlog
    get:
      consumes:
      - application/json
      description: Get a food log
      parameters:
      - description: Food log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/foodlog.FoodLog'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a food log
      tags:
      - foodlog
    put:
      consumes:
      - application/json
      description: Update a food log
      parameters:
      - description: Food log ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/foodlog.FoodLog'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a food log
      tags:
      - foodlog
  /foodlog/user:
    get:
      consumes:
      - application/json
      description: Get a food log by user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/foodlog.FoodLog'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get a food log by user
      tags:
      - foodlog
  /foodlog/user/{date}:
    get:
      consumes:
      - application/json
      description: Get a food log by user and date
      parameters:
      - description: Date
        in: path
        name: date
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/foodlog.FoodLog'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get a food log by user and date
      tags:
      - foodlog
  /ingredient:
    get:
      consumes:
      - application/json
      description: Get all ingredients
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ingredient.Ingredient'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all ingredients
      tags:
      - ingredient
    post:
      consumes:
      - application/json
      description: Create new ingredient
      parameters:
      - description: Ingredient object that needs to be created
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/ingredient.CreateIngredientDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/ingredient.Ingredient'
        "400":
          description: Bad Request
          schema: {}
      summary: Create new ingredient
      tags:
      - ingredient
  /ingredient/{id}:
    delete:
      consumes:
      - application/json
      description: Delete an ingredient
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete an ingredient
      tags:
      - ingredient
    get:
      consumes:
      - application/json
      description: Get an ingredient
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ingredient.Ingredient'
        "400":
          description: Bad Request
          schema: {}
      summary: Get an ingredient
      tags:
      - ingredient
    put:
      consumes:
      - application/json
      description: Update an ingredient
      parameters:
      - description: Ingredient ID
        in: path
        name: id
        required: true
        type: string
      - description: Ingredient object that needs to be updated
        in: body
        name: ingredient
        required: true
        schema:
          $ref: '#/definitions/ingredient.UpdateIngredientDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/ingredient.Ingredient'
        "400":
          description: Bad Request
          schema: {}
      summary: Update an ingredient
      tags:
      - ingredient
  /ingredient/search:
    get:
      consumes:
      - application/json
      description: Search ingredients with optional filters
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Minimum calories
        in: query
        name: minCalories
        type: number
      - description: Maximum calories
        in: query
        name: maxCalories
        type: number
      - description: Nutrients filter (comma-separated)
        in: query
        name: nutrients
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ingredient.Ingredient'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Search and filter ingredients
      tags:
      - ingredient
  /ingredient/user:
    get:
      consumes:
      - application/json
      description: Get ingredients by user
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/ingredient.Ingredient'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get ingredients by user
      tags:
      - ingredient
  /me:
    get:
      consumes:
      - application/json
      description: Get a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a user
      tags:
      - users
  /meal:
    get:
      consumes:
      - application/json
      description: Get all meals
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/meal.Meal'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all meals
      tags:
      - meals
    post:
      consumes:
      - application/json
      description: Create a meal
      parameters:
      - description: Create Meal
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/meal.CreateMealDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/meal.Meal'
        "400":
          description: Bad Request
          schema: {}
      summary: Create a meal
      tags:
      - meals
  /meal/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete a meal
      tags:
      - meals
    get:
      consumes:
      - application/json
      description: Get a meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/meal.Meal'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a meal
      tags:
      - meals
    put:
      consumes:
      - application/json
      description: Update a meal
      parameters:
      - description: Meal ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Meal
        in: body
        name: meal
        required: true
        schema:
          $ref: '#/definitions/meal.UpdateMealDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/meal.Meal'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a meal
      tags:
      - meals
  /meal/search:
    get:
      consumes:
      - application/json
      description: Search meals with optional filters
      parameters:
      - description: Search query
        in: query
        name: q
        type: string
      - description: Category filter
        in: query
        name: category
        type: string
      - description: Minimum calories
        in: query
        name: minCalories
        type: number
      - description: Maximum calories
        in: query
        name: maxCalories
        type: number
      - description: Nutrients filter (comma-separated)
        in: query
        name: nutrients
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/meal.Meal'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Search and filter meals
      tags:
      - meals
  /meal/user/{userid}:
    get:
      consumes:
      - application/json
      description: Get meals by user
      parameters:
      - description: User ID
        in: path
        name: userid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/meal.Meal'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get meals by user
      tags:
      - meals
  /plan:
    get:
      consumes:
      - application/json
      description: Get all plans
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/plans.Plan'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all plans
      tags:
      - plans
    post:
      consumes:
      - application/json
      description: Create a plan
      parameters:
      - description: Create Plan
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/plans.CreatePlanDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/plans.Plan'
        "400":
          description: Bad Request
          schema: {}
      summary: Create a plan
      tags:
      - plans
  /plan/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a plan
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete a plan
      tags:
      - plans
    get:
      consumes:
      - application/json
      description: Get a plan
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plans.Plan'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a plan
      tags:
      - plans
    put:
      consumes:
      - application/json
      description: Update a plan
      parameters:
      - description: Plan ID
        in: path
        name: id
        required: true
        type: string
      - description: Update Plan
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/plans.UpdatePlanDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plans.Plan'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a plan
      tags:
      - plans
  /plan/{user_id}/{day}:
    put:
      consumes:
      - application/json
      description: Update a plan by user and day
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Day of week
        in: path
        name: day
        required: true
        type: string
      - description: Update Plan
        in: body
        name: plan
        required: true
        schema:
          $ref: '#/definitions/plans.UpdatePlanDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plans.Plan'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a plan by user and day
      tags:
      - plans
  /plan/user/{user_id}:
    get:
      consumes:
      - application/json
      description: Get a plan by user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/plans.Plan'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get a plan by user
      tags:
      - plans
  /plan/user/{user_id}/{day}:
    delete:
      consumes:
      - application/json
      description: Delete a plan by user and day
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Day of week
        in: path
        name: day
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete a plan by user and day
      tags:
      - plans
    get:
      consumes:
      - application/json
      description: Get a plan by user and day
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Day of week
        in: path
        name: day
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/plans.Plan'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a plan by user and day
      tags:
      - plans
  /user:
    get:
      consumes:
      - application/json
      description: Get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/user.User'
            type: array
        "400":
          description: Bad Request
          schema: {}
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a user
      parameters:
      - description: Create User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.CreateUserDto'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Create a user
      tags:
      - users
  /user/body:
    patch:
      consumes:
      - application/json
      description: Update a user body
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: UpdateBody User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpdateBodyDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a user body
      tags:
      - users
  /user/energyplan:
    get:
      consumes:
      - application/json
      description: Get a user energy consume plan
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/function.EnergyConsumptionPlan'
        "400":
          description: Bad Request
          schema: {}
      summary: Get a user energy consume plan
      tags:
      - users
  /user/me:
    delete:
      consumes:
      - application/json
      description: Delete a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema: {}
      summary: Delete a user
      tags:
      - users
  /user/usepass:
    patch:
      consumes:
      - application/json
      description: Update a user username and password
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: UpdateUsernamePassword User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/user.UpadateUsernamePasswordDto'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.User'
        "400":
          description: Bad Request
          schema: {}
      summary: Update a user username and password
      tags:
      - users
schemes:
- http
- https
security:
- Bearer: []
- cookieAuth: []
securityDefinitions:
  BearerAuth:
    description: 'Enter your bearer token in the format: Bearer {token}'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
